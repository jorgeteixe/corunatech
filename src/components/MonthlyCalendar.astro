---
import type { CollectionEntry } from 'astro:content'
import '../styles/components/MonthlyCalendar.css'

export interface Props {
  events: CollectionEntry<'events'>[]
  communityNames: Record<string, string>
}

const { events, communityNames } = Astro.props

const baseUrl = import.meta.env.BASE_URL ?? '/'
const sanitizedBaseUrl = baseUrl.endsWith('/') ? baseUrl.slice(0, -1) : baseUrl
const buildCommunityHref = (community: string) =>
  `${sanitizedBaseUrl}/communities/${community}`.replace(/^\/+/, '/')

const now = new Date()

const buildKey = (year: number, month: number, day: number) =>
  `${year}-${String(month + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`

const buildMonthKey = (year: number, month: number) =>
  `${year}-${String(month + 1).padStart(2, '0')}`

const formatTime = (date: Date) =>
  new Intl.DateTimeFormat('gl', {
    hour: '2-digit',
    minute: '2-digit'
  }).format(date)

const formatDateTime = (date: Date) =>
  new Intl.DateTimeFormat('gl', {
    weekday: 'long',
    year: 'numeric',
    month: 'long',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  }).format(date)

const todayKey = buildKey(now.getFullYear(), now.getMonth(), now.getDate())

const parseKey = (key: string) => {
  const [year, month, day] = key.split('-').map(Number)
  return new Date(year, month - 1, day)
}

const weekRangeFormatter = new Intl.DateTimeFormat('gl', {
  day: 'numeric',
  month: 'short'
})

const weekNavFormatter = new Intl.DateTimeFormat('es-ES', {
  day: 'numeric',
  month: 'short'
})

const weekdayLongFormatter = new Intl.DateTimeFormat('gl', {
  weekday: 'long'
})

const monthNavFormatter = new Intl.DateTimeFormat('es-ES', {
  month: 'short',
  year: '2-digit'
})

const shortYear = (value: number) => String(value).slice(-2)

const formatNavText = (value: string) => {
  const cleaned = value.replace(/\./g, '').trim()
  if (!cleaned) {
    return ''
  }
  return cleaned
    .split(/\s+/)
    .map(segment =>
      segment.replace(/^[a-záéíóúñ]/iu, initial => initial.toUpperCase())
    )
    .join(' ')
}

const buildWeekNavLabel = (startDate: Date, endDate: Date) => {
  const startLabel = formatNavText(weekNavFormatter.format(startDate))
  const endLabel = formatNavText(weekNavFormatter.format(endDate))
  return `${startLabel} – ${endLabel} '${shortYear(endDate.getFullYear())}`
}

type CalendarEventItem = {
  id: string
  title: string
  community: string
  communityName: string
  description: string
  location?: string
  duration?: string
  tags: string[]
  timeLabel: string
  dateLabel: string
  rsvpLink?: string
  isFuture: boolean
}

type EventGroup = {
  timeLabel: string
  items: CalendarEventItem[]
}

type DayCell = {
  key: string
  label: number
  isCurrentMonth: boolean
  isToday: boolean
  groups: EventGroup[]
}

type MonthWeek = {
  key: string
  label: string
  navLabel: string
  days: DayCell[]
}

type MonthData = {
  key: string
  label: string
  navLabel: string
  days: DayCell[]
  weeks: MonthWeek[]
}

type WeekEntry = MonthWeek & {
  monthIndex: number
  monthKey: string
}

const eventsByMonth = new Map<string, CollectionEntry<'events'>[]>()
events.forEach(event => {
  const eventDate = event.data.date
  const key = buildMonthKey(eventDate.getFullYear(), eventDate.getMonth())
  if (!eventsByMonth.has(key)) {
    eventsByMonth.set(key, [])
  }
  eventsByMonth.get(key)?.push(event)
})

const referenceDates =
  events.length > 0 ? events.map(event => event.data.date) : [now]
referenceDates.push(now)

const earliestDate = new Date(
  Math.min(...referenceDates.map(date => date.getTime()))
)
const latestDate = new Date(
  Math.max(...referenceDates.map(date => date.getTime()))
)

const rangeStart = new Date(
  earliestDate.getFullYear(),
  earliestDate.getMonth(),
  1
)
const rangeEnd = new Date(latestDate.getFullYear(), latestDate.getMonth(), 1)

const monthKeys: string[] = []
const cursor = new Date(rangeStart)
while (cursor <= rangeEnd) {
  monthKeys.push(buildMonthKey(cursor.getFullYear(), cursor.getMonth()))
  cursor.setMonth(cursor.getMonth() + 1)
}

const prepareGroup = (group: EventGroup) => {
  const visibleItems = group.items.slice(0, 5)
  const overflowItems = group.items.slice(5)
  return {
    columns: 1,
    visibleItems,
    overflowItems,
    overflow: overflowItems.length
  }
}

const createMonthData = (year: number, month: number): MonthData => {
  const key = buildMonthKey(year, month)
  const firstDay = new Date(year, month, 1)
  const lastDay = new Date(year, month + 1, 0)
  const monthEvents =
    eventsByMonth
      .get(key)
      ?.sort((a, b) => a.data.date.getTime() - b.data.date.getTime()) ?? []

  const dayEvents = new Map<string, CalendarEventItem[]>()

  monthEvents.forEach(event => {
    const eventDate = event.data.date
    const dayKey = buildKey(
      eventDate.getFullYear(),
      eventDate.getMonth(),
      eventDate.getDate()
    )
    if (!dayEvents.has(dayKey)) {
      dayEvents.set(dayKey, [])
    }
    const items = dayEvents.get(dayKey)
    if (items) {
      items.push({
        id: event.id,
        title: event.data.title,
        community: event.data.community,
        communityName:
          communityNames[event.data.community] ?? event.data.community,
        description: event.data.description,
        location: event.data.location,
        duration: event.data.duration,
        tags: event.data.tags,
        timeLabel: formatTime(eventDate),
        dateLabel: formatDateTime(eventDate),
        rsvpLink: event.data.rsvpLink,
        isFuture: eventDate.getTime() > now.getTime()
      })
    }
  })

  const startOffset = (firstDay.getDay() + 6) % 7
  const totalCells = Math.ceil((startOffset + lastDay.getDate()) / 7) * 7

  const days: DayCell[] = Array.from({ length: totalCells }, (_, index) => {
    const dayNumber = index - startOffset + 1
    const date = new Date(year, month, dayNumber)
    const dayKey = buildKey(date.getFullYear(), date.getMonth(), date.getDate())
    const isCurrentMonth = dayNumber >= 1 && dayNumber <= lastDay.getDate()
    const eventsForDay = isCurrentMonth ? (dayEvents.get(dayKey) ?? []) : []

    const groupMap = new Map<string, CalendarEventItem[]>()
    eventsForDay.forEach(item => {
      if (!groupMap.has(item.timeLabel)) {
        groupMap.set(item.timeLabel, [])
      }
      groupMap.get(item.timeLabel)?.push(item)
    })

    const groups: EventGroup[] = Array.from(groupMap.entries()).map(
      ([timeLabel, items]) => ({
        timeLabel,
        items
      })
    )

    return {
      key: dayKey,
      label: date.getDate(),
      isCurrentMonth,
      isToday: dayKey === todayKey,
      groups
    }
  })

  const weeks: MonthWeek[] = []
  for (let index = 0; index < totalCells; index += 7) {
    const weekDays = days.slice(index, index + 7)
    if (weekDays.length === 0) {
      continue
    }
    const startDate = parseKey(weekDays[0].key)
    const endDate = parseKey(weekDays[weekDays.length - 1].key)
    const weekLabel = `${weekRangeFormatter.format(startDate)} – ${weekRangeFormatter.format(endDate)}`
    const weekNavLabel = buildWeekNavLabel(startDate, endDate)
    weeks.push({
      key: `${weekDays[0].key}_${weekDays[weekDays.length - 1].key}`,
      label: weekLabel,
      navLabel: weekNavLabel,
      days: weekDays
    })
  }

  const monthLabel = new Intl.DateTimeFormat('gl', {
    month: 'long',
    year: 'numeric'
  }).format(firstDay)

  const monthNavLabel = formatNavText(monthNavFormatter.format(firstDay))

  return {
    key,
    label: monthLabel,
    navLabel: monthNavLabel,
    days,
    weeks
  }
}

const months: MonthData[] = monthKeys.map(key => {
  const [year, month] = key.split('-').map(Number)
  return createMonthData(year, month - 1)
})

const allWeeks: WeekEntry[] = months.flatMap((month, monthIndex) =>
  month.weeks.map(week => ({
    ...week,
    monthIndex,
    monthKey: month.key
  }))
)

const currentMonthKey = buildMonthKey(now.getFullYear(), now.getMonth())
const initialMonthIndex = Math.max(
  months.findIndex(month => month.key === currentMonthKey),
  0
)
const initialWeekIndex = Math.max(
  allWeeks.findIndex(week => week.days.some(day => day.key === todayKey)),
  0
)

const weekdayLabels = Array.from({ length: 7 }, (_, index) =>
  new Intl.DateTimeFormat('gl', { weekday: 'short' })
    .format(new Date(2021, 0, 4 + index))
    .replace('.', '')
)
---

<section
  class="calendar-section"
  aria-label="Monthly events calendar"
  data-calendar-root
  data-initial-month-index={initialMonthIndex}
  data-initial-week-index={initialWeekIndex}
>
  <div class="calendar-header">
    <h2 class="events-title">Próximos Eventos</h2>

    <div class="calendar-nav">
      <button
        type="button"
        class="calendar-nav-button"
        data-action="prev"
        aria-label="Anterior"
      >
        <span aria-hidden="true">‹</span>
      </button>
      <div class="calendar-nav-current">
        <span class="calendar-nav-label" data-calendar-label>
          {
            months[initialMonthIndex]?.navLabel ??
              allWeeks[initialWeekIndex]?.navLabel ??
              ''
          }
        </span>
      </div>
      <button
        type="button"
        class="calendar-nav-button"
        data-action="next"
        aria-label="Seguinte"
      >
        <span aria-hidden="true">›</span>
      </button>
    </div>
  </div>
  <div class="calendar-months">
    {
      months.map((month, index) => (
        <div
          class:list={{
            'calendar-month': true,
            'calendar-month--active': index === initialMonthIndex
          }}
          data-calendar-month={month.key}
          data-calendar-index={index}
          data-label={month.label}
          data-nav-label={month.navLabel}
          aria-hidden={index === initialMonthIndex ? undefined : 'true'}
        >
          <div class="calendar-month-grid">
            <div class="calendar-grid" role="grid">
              {weekdayLabels.map(label => (
                <div class="calendar-weekday" role="columnheader">
                  {label}
                </div>
              ))}

              {month.days.map(day => (
                <div
                  class:list={{
                    'calendar-day': true,
                    'calendar-day--current': day.isCurrentMonth,
                    'calendar-day--outside': !day.isCurrentMonth,
                    'calendar-day--today': day.isToday
                  }}
                  data-calendar-date={day.key}
                  role="gridcell"
                >
                  <div class="calendar-day-label">{day.label}</div>
                  <div class="calendar-day-events">
                    {day.groups.map(group => {
                      const { columns, visibleItems, overflowItems, overflow } =
                        prepareGroup(group)
                      return (
                        <div
                          class="calendar-event-group"
                          style={`--calendar-group-columns:${columns}`}
                        >
                          {visibleItems.map(event => (
                            <div
                              class="calendar-event-wrapper"
                              data-calendar-event={event.id}
                            >
                              <button
                                type="button"
                                class="calendar-event"
                                data-calendar-community={event.community}
                                data-event-id={event.id}
                                data-event-title={event.title}
                                data-event-community-name={event.communityName}
                                data-event-description={event.description}
                                data-event-date-label={event.dateLabel}
                                data-event-duration={event.duration || ''}
                                data-event-location={event.location || ''}
                                data-event-tags={JSON.stringify(event.tags)}
                                data-event-rsvp-link={event.rsvpLink || ''}
                                data-event-is-future={event.isFuture}
                                title={`${event.title} • ${event.timeLabel}`}
                              >
                                <span class="calendar-event-title">
                                  {event.communityName} • {event.timeLabel}
                                </span>
                              </button>
                            </div>
                          ))}
                          {overflow > 0 && (
                            <div class="calendar-event-overflow-wrapper">
                              <button
                                type="button"
                                class="calendar-event-overflow"
                                aria-label={`+${overflow} eventos máis neste horario`}
                              >
                                +{overflow}
                              </button>
                            </div>
                          )}
                        </div>
                      )
                    })}
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      ))
    }
  </div>

  <div class="calendar-week-view">
    {
      allWeeks.map((week, index) => (
        <section
          class:list={{
            'calendar-week': true,
            'calendar-week--active': index === initialWeekIndex
          }}
          data-calendar-week={week.key}
          data-week-index={index}
          data-week-label={week.label}
          data-week-nav-label={week.navLabel}
          aria-hidden={index === initialWeekIndex ? undefined : 'true'}
          aria-label={week.label}
        >
          <div class="calendar-week-days">
            {week.days.map(day => {
              const weekdayLabel = weekdayLongFormatter.format(
                parseKey(day.key)
              )
              return (
                <div
                  class:list={{
                    'calendar-week-day': true,
                    'calendar-week-day--outside': !day.isCurrentMonth,
                    'calendar-week-day--today': day.isToday
                  }}
                  data-calendar-date={day.key}
                >
                  <div class="calendar-week-day-heading">
                    <span class="calendar-week-day-number">{day.label}</span>
                    <span class="calendar-week-day-name">{weekdayLabel}</span>
                  </div>
                  <div class="calendar-week-day-events">
                    {day.groups.length === 0 ? (
                      <p class="calendar-week-day-empty">Sen eventos</p>
                    ) : (
                      day.groups.map(group => {
                        const {
                          columns,
                          visibleItems,
                          overflowItems,
                          overflow
                        } = prepareGroup(group)
                        return (
                          <div
                            class:list={{
                              'calendar-event-group': true,
                              'calendar-event-group--vertical': true
                            }}
                            style={`--calendar-group-columns:${columns}`}
                          >
                            {visibleItems.map(event => (
                              <div
                                class="calendar-event-wrapper"
                                data-calendar-event={event.id}
                              >
                                <a
                                  href={buildCommunityHref(event.community)}
                                  class="calendar-event"
                                  data-calendar-community={event.community}
                                  title={`${event.title} • ${event.timeLabel}`}
                                >
                                  <span class="calendar-event-title">
                                    {event.communityName} • {event.timeLabel}
                                  </span>
                                </a>
                              </div>
                            ))}
                            {overflow > 0 && (
                              <div class="calendar-event-overflow-wrapper">
                                <button
                                  type="button"
                                  class="calendar-event-overflow"
                                  aria-label={`+${overflow} eventos máis neste horario`}
                                >
                                  +{overflow}
                                </button>
                              </div>
                            )}
                          </div>
                        )
                      })
                    )}
                  </div>
                </div>
              )
            })}
          </div>
        </section>
      ))
    }
  </div>
</section>

<script src="../scripts/calendar-navigation.ts"></script>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    if (window.initializeCalendarNavigation) {
      window.initializeCalendarNavigation()
    }
  })
</script>
