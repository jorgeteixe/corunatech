---
import { getCollection } from 'astro:content'
import '../styles/components/CursorFollower.css'

const communities = await getCollection('communities')
const communityLogos = communities.map(community => community.data.logo)
---

<div id="cursor-follower" class="cursor-follower">
  <span class="cursor-text">click</span>
</div>

<script define:vars={{ communityLogos }}>
  document.addEventListener('DOMContentLoaded', () => {
    const follower = document.getElementById('cursor-follower')

    // Mejoramos la comunicación con el botón de borrado a través de un evento personalizado
    document.addEventListener('clear-stickers', () => {
      const stickers = document.querySelectorAll('.click-sticker')
      stickers.forEach(sticker => sticker.remove())
    })

    if (follower) {
      let cursorX = 0
      let cursorY = 0
      let followerX = 0
      let followerY = 0
      let isOverSlider = false
      let isOverSpecialButton = false

      function checkIfOverSlider(e) {
        const target = e.target
        isOverSlider = !!target.closest('.events-section')

        // Verificar si estamos sobre un botón especial con mensaje
        const specialButton = target.closest('[data-cursor-message]')
        const textSpan = follower.querySelector('.cursor-text')

        if (specialButton) {
          isOverSpecialButton = true
          if (textSpan) {
            textSpan.textContent = specialButton.dataset.cursorMessage
          }
        } else if (isOverSpecialButton) {
          isOverSpecialButton = false
          if (textSpan) {
            textSpan.textContent = 'click'
          }
        }

        if (follower) {
          follower.style.opacity = isOverSlider ? '0' : '1'
        }
      }

      document.addEventListener('mousemove', e => {
        cursorX = e.clientX
        cursorY = e.clientY
        checkIfOverSlider(e)
      })

      function updateFollowerPosition() {
        followerX += (cursorX - followerX) * 0.1
        followerY += (cursorY - followerY) * 0.1

        if (follower) {
          // Obtener dimensiones del elemento y la ventana
          const followerRect = follower.getBoundingClientRect()
          const windowWidth = window.innerWidth
          const windowHeight = window.innerHeight

          // Calcular posición ajustada para que no se salga de la pantalla
          let adjustedX = followerX
          let adjustedY = followerY

          // Ajustar posición X para evitar que se salga por la derecha
          if (followerX + followerRect.width > windowWidth) {
            adjustedX = windowWidth - followerRect.width - 10 // 10px de margen
          }

          // Ajustar posición X para evitar que se salga por la izquierda
          if (followerX < 0) {
            adjustedX = 10 // 10px de margen
          }

          // Ajustar posición Y para evitar que se salga por abajo
          if (followerY + followerRect.height > windowHeight) {
            adjustedY = windowHeight - followerRect.height - 10 // 10px de margen
          }

          // Ajustar posición Y para evitar que se salga por arriba
          if (followerY < 0) {
            adjustedY = 10 // 10px de margen
          }

          follower.style.left = `${adjustedX}px`
          follower.style.top = `${adjustedY}px`
        }

        requestAnimationFrame(updateFollowerPosition)
      }

      updateFollowerPosition()

      document.addEventListener('click', e => {
        const target = e.target

        if (follower) {
          const textSpan = follower.querySelector('.cursor-text')
          if (textSpan && !isOverSlider) {
            textSpan.textContent = 'click!'

            setTimeout(() => {
              textSpan.textContent = 'click'
            }, 1000)
          }
        }

        // No crear pegatinas si estamos sobre el slider o sobre elementos interactivos
        if (target.closest('a, button') || isOverSlider) {
          return
        }

        const outerContainer = document.createElement('div')
        const stickerImage = document.createElement('img')

        const randomLogo =
          communityLogos[Math.floor(Math.random() * communityLogos.length)]
        const randomRotation = Math.random() * 30 - 15

        // Usamos las formas del componente de React
        const stickerShapes = [
          'shape-circle',
          'shape-rounded',
          'shape-pill',
          'shape-squircle',
          'shape-blob',
          'shape-arch',
          'shape-shield',
          'shape-ticket'
        ]
        // Usamos los bordes solicitados
        const stickerBorders = [
          'border-simple',
          'border-double',
          'border-dotted',
          'border-dashed'
        ]

        const randomShape =
          stickerShapes[Math.floor(Math.random() * stickerShapes.length)]
        const randomBorder =
          stickerBorders[Math.floor(Math.random() * stickerBorders.length)]

        // Añadimos un color aleatorio para el borde (del 1 al 5)
        const randomColor = `border-color-${Math.floor(Math.random() * 5) + 1}`

        outerContainer.classList.add(
          'click-sticker',
          randomShape,
          randomBorder,
          randomColor
        )
        outerContainer.style.left = `${e.pageX}px`
        outerContainer.style.top = `${e.pageY}px`
        outerContainer.style.transform = `translate(-50%, -50%) scale(1) rotate(${randomRotation}deg)`

        stickerImage.src = randomLogo // Los logos son URLs directas
        stickerImage.alt = 'Community Logo Sticker'
        stickerImage.classList.add('sticker-image-content')
        // Agregamos un evento de error para detectar fallos de carga de imagen
        stickerImage.onerror = function () {
          this.src = 'https://placekitten.com/100/100' // Imagen de fallback
          console.error('Error cargando logo:', randomLogo)
        }

        outerContainer.appendChild(stickerImage)

        const animation = outerContainer.animate(
          [
            {
              transform: `translate(-50%, -50%) scale(0) rotate(${randomRotation}deg)`
            },
            {
              transform: `translate(-50%, -50%) scale(1) rotate(${randomRotation}deg)`
            }
          ],
          {
            duration: 200,
            easing: 'ease-out'
          }
        )
        animation.play()

        document.body.appendChild(outerContainer)
      })
    }
  })
</script>
